package emenuserver;import GUI.MainWindow;import java.io.IOException;import java.sql.SQLException;import java.util.logging.Level;import java.util.logging.Logger;import org.json.JSONException;import org.json.JSONObject;import org.json.JSONArray;import emenuserver.Database.eMenuSQL;import java.io.BufferedReader;import java.io.InputStreamReader;import java.io.OutputStream;import java.io.OutputStreamWriter;import java.io.PrintWriter;import java.net.Socket;import java.nio.charset.StandardCharsets;import java.sql.Timestamp;import java.util.Date;public class eMenuServerThread extends Thread{    public Socket serverSocket;    MainWindow callerWindow;    String DBName;    int StoreType;    public eMenuServerThread(Socket socket, MainWindow callerwindow) throws ClassNotFoundException {        this.serverSocket = socket;        this.callerWindow = callerwindow;        callerWindow.logMessage("New Client Connected");        }    @Override    public void run() {        try {            PrintWriter out = new PrintWriter(new OutputStreamWriter(serverSocket.getOutputStream(), StandardCharsets.UTF_8), true);            BufferedReader in = new BufferedReader(new InputStreamReader(serverSocket.getInputStream(), "UTF-8"));            String inputLine;            while((inputLine = in.readLine()) != null) {                 try {                    JSONObject obj = new JSONObject(inputLine);                    if(obj.getString("Msg").toLowerCase().equals("view_items")) {                      eMenuSQL SQL = new eMenuSQL(DBName);                      JSONArray items = SQL.getItems();                      if(items.length() > 0) {                        out.println(items.toString());                      }                    } else if(obj.getString("Msg").toLowerCase().equals("all_sections")) {                        eMenuSQL SQL = new eMenuSQL(DBName);                        JSONArray categories = SQL.getSections(StoreType);                        if(categories.length() > 0) {                            out.println(categories.toString());                            callerWindow.logMessage(categories.toString());                        } else {                            JSONArray array = new JSONArray();                            JSONObject msg = new JSONObject();                            msg.put("Msg", "all_sections");                            msg.put("info", "no_sections");                            array.put(msg);                            out.println(array.toString());                        }                    } else if(obj.getString("Msg").toLowerCase().equals("section_categories")) {                       eMenuSQL SQL = new eMenuSQL(DBName);                       JSONArray categories = SQL.getCategories(StoreType);                       out.println(categories.toString());                    } else if(obj.getString("Msg").toLowerCase().equals("section_categories_id")) {                       eMenuSQL SQL = new eMenuSQL(DBName);                       int id = obj.getInt("section_id");                       JSONArray categories = SQL.getCategories(id);                       out.println(categories.toString());                    }else if(obj.getString("Msg").toLowerCase().equals("new_order")) {                        JSONObject order_details = obj.getJSONObject("order");                        eMenuSQL SQL = new eMenuSQL(DBName);                        int invoiceId;                        if((invoiceId = SQL.InsertNewOrder(order_details)) != -1) {                            callerWindow.logMessage("Order Sent");                            int tableNumber = order_details.getInt("table_num");                            JSONObject invoice = new JSONObject();                            invoice.put("Msg", "new_invoice");                            invoice.put("db", DBName);                            invoice.put("table_num", tableNumber);                            invoice.put("invoice_id", invoiceId);                            for(eMenuServerThread t : callerWindow.clients) {                               t.SendMessage(invoice.toString());                            }                        } else {                            callerWindow.logMessage("Order Failed");                        }                    } else if(obj.getString("Msg").toLowerCase().equals("usernames")) {                        eMenuSQL SQL = new eMenuSQL(DBName);                        JSONArray usernames = SQL.GetUsernames();                       out.println(usernames.toString());                    } else if(obj.getString("Msg").toLowerCase().equals("verification")) {                            String type = obj.getString("info");                            String password = obj.getString("password");                            eMenuSQL SQL = new eMenuSQL(DBName);                            JSONArray me = SQL.UserAuthentication(type, password);                            if(me != null) {                               out.println(me.toString());                            } else                             {                                System.out.println("user is null");                            }                    } else if(obj.getString("Msg").toLowerCase().equals("category_items")) {                        eMenuSQL SQL = new eMenuSQL(DBName);                        JSONArray items = SQL.getCategoryItems(StoreType);                        if(items != null)                            out.println(items.toString());                    } else if(obj.getString("Msg").toLowerCase().equals("unpaid_invoices")) {                        eMenuSQL SQL = new eMenuSQL(DBName);                        JSONObject invoices = SQL.getUnpaidInvoices(obj.getInt("userID"));                        if(invoices != null) {                            out.println(invoices.toString());                        } else {                            callerWindow.logMessage("No invoices or id is incorrect");                        }                    } else if(obj.getString("Msg").toLowerCase().equals("close_connection")) {                        Close();                        break;                    } else if(obj.getString("Msg").toLowerCase().equals("invoice_details")) {                        eMenuSQL SQL = new eMenuSQL(DBName);                        JSONObject items = SQL.getInvoiceDetails(obj.getInt("invoice_id"));                        if(items != null) {                            out.println(items.toString());                        }                    } else if(obj.getString("Msg").toLowerCase().equals("user_verify")) {                        eMenuSQL SQL = new eMenuSQL(DBName);                        String username = obj.getString("username");                        String password = obj.getString("password");                        JSONObject user = SQL.verifyCustomer(username,password);                        if(user != null) {                            out.println(user.toString());                            System.out.println("Sent" + user);                        } else {                            System.out.println("Sent not");                        }                    } else if(obj.getString("Msg").toLowerCase().equals("new_user")) {                        String username = obj.getString("username");                        String password = obj.getString("password");                        String phone = obj.getString("phone");                        String email = obj.getString("email");                        String address1 = obj.getString("address1");                        String address2 = obj.getString("building");                        String floor = obj.getString("floor");                        String apt = obj.getString("apt");                        double lat = obj.getDouble("lat");                        double longt = obj.getDouble("long");                        eMenuSQL SQL = new eMenuSQL(DBName);                        JSONObject user = SQL.createNewCustomer(username, password, phone, email, address1,address2, floor, apt, lat, longt);                        if(user != null) {                            out.println(user);                            sendClientMessage(DBName, obj.toString());                        }                    } else if(obj.getString("Msg").toLowerCase().equals("new_order_d")) {                        int cstId = obj.getInt("user_id");                        boolean isTakeAway = obj.getBoolean("takeaway");                        double cost = obj.getDouble("cost");                        eMenuSQL SQL = new eMenuSQL(DBName);                        callerWindow.logMessage("Delivery order accepted");                        JSONObject msg = new JSONObject();                        msg.put("Msg", "print_order");                        msg.put("items", obj.getJSONArray("items"));                        msg.put("cstId", cstId);                        Timestamp time = new Timestamp(new Date().getTime());                        msg.put("time", time.getTime());                        msg.put("user", SQL.GetCstWithId(cstId));                        msg.put("takeaway", isTakeAway);                        sendClientMessage(DBName, msg.toString());                    } else if(obj.getString("Msg").toLowerCase().equals("extra_items")) {                        eMenuSQL sql = new eMenuSQL(DBName);                        JSONArray returned = sql.getExtraitems();                        if(returned != null) {                            out.println(returned.toString());                            callerWindow.logMessage("Query is correct");                                                    } else {                            callerWindow.logMessage("Query is not correct");                        }                    } else if(obj.getString("Msg").toLowerCase().equals("choose_items")) {                         eMenuSQL sql = new eMenuSQL(DBName);                        JSONArray returned = sql.getChooseItems();                        if(returned != null) {                            out.println(returned.toString());                            callerWindow.logMessage("Query is correct");                                                    } else {                            callerWindow.logMessage("Query is not correct");                        }                    } else if (obj.getString("Msg").toLowerCase().equals("without_items")) {                        eMenuSQL sql = new eMenuSQL(DBName);                        JSONArray returned = sql.getWithoutItems();                        if(returned != null) {                            out.println(returned.toString());                            callerWindow.logMessage("Query is correct");                                                    } else {                            callerWindow.logMessage("Query is not correct");                        }                                           } else if(obj.getString("Msg").toLowerCase().equals("reg_db")) {                        DBName = obj.getString("db");                        String storeType = obj.getString("type");                        if(storeType.equals("storeType"))                            StoreType = Types.StoreTypes.Store;                        else if(storeType.equals("storeClient"))                             StoreType = Types.StoreTypes.CLIENT;                        else                            StoreType = Types.StoreTypes.Cafe;                    } else if(obj.getString("Msg").equals("kitchen_orders")) {                                                eMenuSQL sql = new eMenuSQL(DBName);                        JSONArray returned = sql.getKitchenOrders();                        if(returned != null)                        {                            out.println(returned.toString());                            callerWindow.logMessage("Kitchen orders sent");                        }                        else                        {                            callerWindow.logMessage("Kitchen orders failed");                        }                    } else if(obj.getString("Msg").equals("update_user"))                    {                        String change_type = obj.getString("change_type");                        int userID = obj.getInt("user_id");                        eMenuSQL SQl = new eMenuSQL(DBName);                        JSONObject msg = new JSONObject();                        msg.put("Msg", "user_update");                        String messageString = SQl.UpdateUser(change_type, userID, obj);                        msg.put("message", messageString);                        if(!messageString.equals(""))                        {                            msg.put("user_updated", true);                        }                        else                        {                            msg.put("user_updated", false);                        }                                                out.println(msg.toString());                    } else if(obj.getString("Msg").equals("d_order_done")) {                        int invoiceID = obj.getInt("id");                        double price = obj.getDouble("value");                        eMenuSQL SQL = new eMenuSQL(DBName);                        boolean isDone = SQL.insertNewOrderD(invoiceID, callerWindow, price);                        if(isDone) {                            callerWindow.logMessage("A new order has been placed for Merchent " + DBName);                        } else {                            callerWindow.logMessage("A new order was not placed for Merchent " + DBName);                        }                    }                    callerWindow.logMessage(inputLine);                } catch (JSONException ex) {                    callerWindow.logMessage("Not a json message " + inputLine);                    ex.printStackTrace();                } catch (SQLException ex) {                    Logger.getLogger(eMenuServerThread.class.getName()).log(Level.SEVERE, null, ex);                }            }                    } catch (IOException ex) {            Logger.getLogger(eMenuServerThread.class.getName()).log(Level.SEVERE, null, ex);        }    }    public void Close() {        try {            serverSocket.close();            callerWindow.clients.remove(this);        } catch (IOException ex) {            Logger.getLogger(eMenuServerThread.class.getName()).log(Level.SEVERE, null, ex);        }       callerWindow.logMessage("Client Disconnected");    }    public void SendMessage(String message) {        try {            PrintWriter output = new PrintWriter( new OutputStreamWriter(serverSocket.getOutputStream(), StandardCharsets.UTF_8), true);            output.println(message);            callerWindow.logMessage("Sent a message to " + serverSocket.getRemoteSocketAddress());        } catch (IOException ex) {            Logger.getLogger(eMenuServerThread.class.getName()).log(Level.SEVERE, null, ex);        }    }        public class PingServer implements Runnable {        @Override        public void run() {            while(serverSocket.isConnected()) {                try {                    PrintWriter output = new PrintWriter( new OutputStreamWriter(serverSocket.getOutputStream(), StandardCharsets.UTF_8), true);                    output.print("Pinging");                } catch (IOException ex) {                    Close();                    break;                }                try {                    Thread.sleep(3000);                } catch (InterruptedException ex) {                    Logger.getLogger(eMenuServerThread.class.getName()).log(Level.SEVERE, null, ex);                }            }        }    }        public void sendClientMessage(String dbName, String msg) {         for(int e = 0; e < callerWindow.clients.size(); e++) {           if(callerWindow.clients.get(e) == this) continue;           if(callerWindow.clients.get(e).StoreType == Types.StoreTypes.CLIENT && callerWindow.clients.get(e).DBName.equalsIgnoreCase(dbName))                callerWindow.clients.get(e).SendMessage(msg);         }    }}